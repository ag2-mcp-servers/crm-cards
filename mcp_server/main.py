# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T03:33:45+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import APIKeyQuery, BaseSecurity
from fastapi import Path

from models import (
    CardCreateRequest,
    CardListResponse,
    CardPatchRequest,
    CardResponse,
    Error,
    IntegratorCardPayloadResponse,
)

app = MCPProxy(
    description='Allows an app to extend the CRM UI by surfacing custom cards in the sidebar of record pages. These cards are defined up-front as part of app configuration, then populated by external data fetch requests when the record page is accessed by a user.',
    title='CRM cards',
    version='v3',
    servers=[{'url': 'https://api.hubapi.com/'}],
)


@app.get(
    '/crm/v3/extensions/cards/sample-response',
    description=""" Returns an example card detail response. This is the payload with displayed details for a card that will be shown to a user. An app should send this in response to the data fetch request. """,
    tags=['card_management'],
)
def get_sample_card_detail_response():
    """
    Get sample card detail response
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/crm/v3/extensions/cards/{appId}',
    description=""" Returns a list of cards for a given app. """,
    tags=['card_management'],
    security=[
        APIKeyQuery(name="hapikey"),
    ],
)
def get__crm_v3_extensions_cards__app_id__get_all(
    app_id: int = Path(..., alias='appId')
):
    """
    Get all cards
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/crm/v3/extensions/cards/{appId}',
    description=""" Defines a new card that will become active on an account when this app is installed. """,
    tags=['card_management'],
    security=[
        APIKeyQuery(name="hapikey"),
    ],
)
def post__crm_v3_extensions_cards__app_id__create(
    app_id: int = Path(..., alias='appId'), body: CardCreateRequest = ...
):
    """
    Create a new card
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/crm/v3/extensions/cards/{appId}/{cardId}',
    description=""" Permanently deletes a card definition with the given ID. Once deleted, data fetch requests for this card will no longer be sent to your service. This can't be undone. """,
    tags=['card_management'],
    security=[
        APIKeyQuery(name="hapikey"),
    ],
)
def delete__crm_v3_extensions_cards__app_id___card_id__archive(
    app_id: int = Path(..., alias='appId'), card_id: str = Path(..., alias='cardId')
):
    """
    Delete a card
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/crm/v3/extensions/cards/{appId}/{cardId}',
    description=""" Returns the definition for a card with the given ID. """,
    tags=['card_management'],
    security=[
        APIKeyQuery(name="hapikey"),
    ],
)
def get__crm_v3_extensions_cards__app_id___card_id__get_by_id(
    app_id: int = Path(..., alias='appId'), card_id: str = Path(..., alias='cardId')
):
    """
    Get a card.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/crm/v3/extensions/cards/{appId}/{cardId}',
    description=""" Update a card definition with new details. """,
    tags=['card_management'],
    security=[
        APIKeyQuery(name="hapikey"),
    ],
)
def patch__crm_v3_extensions_cards__app_id___card_id__update(
    app_id: int = Path(..., alias='appId'),
    card_id: str = Path(..., alias='cardId'),
    body: CardPatchRequest = ...,
):
    """
    Update a card
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
