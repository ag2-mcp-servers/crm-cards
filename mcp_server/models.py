# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T03:33:45+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Dict, List, Optional, Union
from uuid import UUID

from pydantic import BaseModel, Field


class ActionConfirmationBody(BaseModel):
    cancelButtonLabel: str
    confirmButtonLabel: str
    prompt: str


class HttpMethod(Enum):
    CONNECT = 'CONNECT'
    DELETE = 'DELETE'
    GET = 'GET'
    HEAD = 'HEAD'
    OPTIONS = 'OPTIONS'
    PATCH = 'PATCH'
    POST = 'POST'
    PUT = 'PUT'
    TRACE = 'TRACE'


class Type(Enum):
    ACTION_HOOK = 'ACTION_HOOK'


class ActionHookActionBody(BaseModel):
    confirmation: Optional[ActionConfirmationBody] = None
    httpMethod: HttpMethod
    label: Optional[str] = None
    propertyNamesIncluded: List[str]
    type: Type
    url: str


class CardActions(BaseModel):
    baseUrls: List[str] = Field(
        ...,
        description="A list of URL prefixes that will be accepted for card action URLs. If your data fetch response includes an action URL that doesn't begin with one of these values, it will result in an error and the card will not be displayed.",
    )


class DataType(Enum):
    BOOLEAN = 'BOOLEAN'
    CURRENCY = 'CURRENCY'
    DATE = 'DATE'
    DATETIME = 'DATETIME'
    EMAIL = 'EMAIL'
    LINK = 'LINK'
    NUMERIC = 'NUMERIC'
    STRING = 'STRING'
    STATUS = 'STATUS'


class Name(Enum):
    contacts = 'contacts'
    deals = 'deals'
    companies = 'companies'
    tickets = 'tickets'


class CardObjectTypeBody(BaseModel):
    name: Name = Field(
        ..., description='A CRM object type where this card should be displayed.'
    )
    propertiesToSend: List[str] = Field(
        ...,
        description="An array of properties that should be sent to this card's target URL when the data fetch request is made. Must be valid properties for the corresponding CRM object type.",
    )


class Type1(Enum):
    DEFAULT = 'DEFAULT'
    SUCCESS = 'SUCCESS'
    WARNING = 'WARNING'
    DANGER = 'DANGER'
    INFO = 'INFO'


class DisplayOption(BaseModel):
    label: str = Field(
        ..., description='The text that will be displayed to users for this option.'
    )
    name: str = Field(..., description='JSON-friendly unique name for option.')
    type: Type1 = Field(..., description='The type of status.')


class ErrorDetail(BaseModel):
    code: Optional[str] = Field(
        None, description='The status code associated with the error detail'
    )
    context: Optional[Dict[str, List[str]]] = Field(
        None,
        description='Context about the error condition',
        examples=[{'missingScopes': ['scope1', 'scope2']}],
    )
    in_: Optional[str] = Field(
        None,
        alias='in',
        description='The name of the field or parameter in which the error was found.',
    )
    message: str = Field(
        ...,
        description='A human readable message describing the error along with remediation steps where appropriate',
    )
    subCategory: Optional[str] = Field(
        None,
        description='A specific category that contains more specific detail about the error',
    )


class Type2(Enum):
    IFRAME = 'IFRAME'


class IFrameActionBody(BaseModel):
    height: int
    label: Optional[str] = None
    propertyNamesIncluded: List[str]
    type: Type2
    url: str
    width: int


class ResponseVersion(Enum):
    v1 = 'v1'
    v3 = 'v3'


class ObjectToken(BaseModel):
    dataType: Optional[DataType] = None
    label: Optional[str] = None
    name: Optional[str] = None
    value: str


class TopLevelActions(BaseModel):
    primary: Optional[Union[ActionHookActionBody, IFrameActionBody]] = None
    secondary: List[Union[ActionHookActionBody, IFrameActionBody]]
    settings: Optional[IFrameActionBody] = None


class CardDisplayProperty(BaseModel):
    dataType: DataType = Field(
        ..., description='Type of data represented by this property.'
    )
    label: str = Field(
        ...,
        description="The label for this property as you'd like it displayed to users.",
    )
    name: str = Field(
        ...,
        description='An internal identifier for this property. This value must be unique TODO.',
    )
    options: List[DisplayOption] = Field(
        ...,
        description='An array of available options that can be displayed. Only used in when `dataType` is `STATUS`.',
    )


class CardFetchBody(BaseModel):
    objectTypes: List[CardObjectTypeBody] = Field(
        ...,
        description='An array of CRM object types where this card should be displayed. HubSpot will call your data fetch URL whenever a user visits a record page of the types defined here.',
    )
    targetUrl: str = Field(
        ...,
        description='URL to a service endpoints that will respond with card details. HubSpot will call this endpoint each time a user visits a CRM record page where this card should be displayed.',
    )


class CardFetchBodyPatch(BaseModel):
    objectTypes: List[CardObjectTypeBody] = Field(
        ...,
        description='An array of CRM object types where this card should be displayed. HubSpot will call your target URL whenever a user visits a record page of the types defined here.',
    )
    targetUrl: Optional[str] = Field(
        None,
        description='URL to a service endpoint that will respond with details for this card. HubSpot will call this endpoint each time a user visits a CRM record page where this card should be displayed.',
    )


class Error(BaseModel):
    category: str = Field(..., description='The error category')
    context: Optional[Dict[str, List[str]]] = Field(
        None,
        description='Context about the error condition',
        examples=[
            {
                'invalidPropertyName': ['propertyValue'],
                'missingScopes': ['scope1', 'scope2'],
            }
        ],
    )
    correlationId: UUID = Field(
        ...,
        description='A unique identifier for the request. Include this value with any error reports or support tickets',
        examples=['aeb5f871-7f07-4993-9211-075dc63e7cbf'],
    )
    errors: Optional[List[ErrorDetail]] = Field(
        None, description='further information about the error'
    )
    links: Optional[Dict[str, str]] = Field(
        None,
        description='A map of link names to associated URIs containing documentation about the error or recommended remediation steps',
    )
    message: str = Field(
        ...,
        description='A human readable message describing the error along with remediation steps where appropriate',
        examples=['An error occurred'],
    )
    subCategory: Optional[str] = Field(
        None,
        description='A specific category that contains more specific detail about the error',
    )


class IntegratorObjectResult(BaseModel):
    actions: List[Union[ActionHookActionBody, IFrameActionBody]]
    id: str
    linkUrl: Optional[str] = None
    title: str
    tokens: List[ObjectToken]


class CardDisplayBody(BaseModel):
    properties: List[CardDisplayProperty] = Field(
        ...,
        description='Card display properties. These will will be rendered as "label : value" pairs in the card UI. See the [example card](#) in the overview docs for more details.',
    )


class CardPatchRequest(BaseModel):
    actions: Optional[CardActions] = None
    display: Optional[CardDisplayBody] = None
    fetch: Optional[CardFetchBodyPatch] = None
    title: Optional[str] = Field(
        None,
        description='The top-level title for this card. Displayed to users in the CRM UI.',
    )


class CardResponse(BaseModel):
    actions: CardActions
    createdAt: Optional[datetime] = Field(
        None, description='When this card was created.'
    )
    display: CardDisplayBody
    fetch: CardFetchBody
    id: str = Field(..., description='Generated unique ID for card.')
    title: str = Field(..., description='Displayed title of this card.')
    updatedAt: Optional[datetime] = Field(
        None, description='The last time this card was updated.'
    )


class IntegratorCardPayloadResponse(BaseModel):
    allItemsLinkUrl: Optional[str] = Field(
        None,
        description='URL to a page the integrator has built that displays all details for this card. This URL will be displayed to users under a `See more [x]` link if there are more than five items in your response, where `[x]` is the value of `itemLabel`.',
    )
    cardLabel: Optional[str] = Field(
        None,
        description="The label to be used for the `allItemsLinkUrl` link (e.g. 'See more tickets'). If not provided, this falls back to the card's title.",
    )
    responseVersion: Optional[ResponseVersion] = None
    sections: Optional[List[IntegratorObjectResult]] = Field(
        None, description='A list of up to five valid card sub categories.'
    )
    topLevelActions: Optional[TopLevelActions] = None
    totalCount: int = Field(
        ...,
        description='The total number of card properties that will be sent in this response.',
    )


class CardCreateRequest(BaseModel):
    actions: CardActions
    display: CardDisplayBody
    fetch: CardFetchBody
    title: str = Field(
        ...,
        description='The top-level title for this card. Displayed to users in the CRM UI.',
    )


class CardListResponse(BaseModel):
    results: List[CardResponse] = Field(..., description='List of card definitions')
